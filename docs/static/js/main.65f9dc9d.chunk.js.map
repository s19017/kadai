{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","url","window","innerWidth","innerHeight","normal","gray","blur","grayscaleblur","URL","this","setState","className","class","Button","onClick","URL_normal","variant","color","URL_gray","URL_blur","URL_grayscaleblur","location","reload","src","Component","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qRAKqBA,E,YACnB,WAAaC,GAAQ,IAAD,8BAClB,4CAAMA,KACDC,MAAQ,CACXC,IACE,yBAA2BC,OAAOC,WAAa,IAAMD,OAAOE,YAC9DC,OAAQ,WACRC,KAAM,cACNC,KAAM,SACNC,cAAe,qBACfC,IAAK,MATW,E,0EAalBC,KAAKC,SAAS,CAAEF,IAAKC,KAAKV,MAAMC,IAAMS,KAAKV,MAAMK,W,iCAGjDK,KAAKC,SAAS,CAAEF,IAAKC,KAAKV,MAAMC,IAAMS,KAAKV,MAAMM,S,iCAGjDI,KAAKC,SAAS,CAAEF,IAAKC,KAAKV,MAAMC,IAAMS,KAAKV,MAAMO,S,0CAGjDG,KAAKC,SAAS,CAAEF,IAAKC,KAAKV,MAAMC,IAAMS,KAAKV,MAAMQ,kB,+BAGxC,IAAD,OACR,OACE,yBAAKI,UAAU,OACb,yBAAKC,MAAM,SACT,qDAEF,yBAAKA,MAAM,UAIT,kBAACC,EAAA,EAAD,CACEC,QAAS,kBAAM,EAAKC,cACpBC,QAAQ,YACRC,MAAM,WAHR,UAOA,kBAACJ,EAAA,EAAD,CACEC,QAAS,kBAAM,EAAKI,YACpBF,QAAQ,YACRC,MAAM,WAHR,QAOA,kBAACJ,EAAA,EAAD,CACEC,QAAS,kBAAM,EAAKK,YACpBH,QAAQ,YACRC,MAAM,WAHR,QAOA,kBAACJ,EAAA,EAAD,CACEC,QAAS,kBAAM,EAAKM,qBACpBJ,QAAQ,YACRC,MAAM,WAHR,YAOA,kBAACJ,EAAA,EAAD,CACEC,QAAS,kBAAMb,OAAOoB,SAASC,UAC/BN,QAAQ,YACRC,MAAM,WAHR,WAQF,6BACE,yBAAKM,IAAKd,KAAKV,MAAMS,Y,GAzEEgB,aCObC,QACW,cAA7BxB,OAAOoB,SAASK,UAEe,UAA7BzB,OAAOoB,SAASK,UAEhBzB,OAAOoB,SAASK,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.65f9dc9d.chunk.js","sourcesContent":["import React, { Component } from 'react'\nimport './App.css'\n\nimport { Button } from '@material-ui/core'\n\nexport default class App extends Component {\n  constructor (props) {\n    super(props)\n    this.state = {\n      url:\n        'https://picsum.photos/' + window.innerWidth + '/' + window.innerHeight,\n      normal: '/?random',\n      gray: '/?grayscale',\n      blur: '/?blur',\n      grayscaleblur: '/?grayscale&blur=2',\n      URL: null\n    }\n  }\n  URL_normal () {\n    this.setState({ URL: this.state.url + this.state.normal })\n  }\n  URL_gray () {\n    this.setState({ URL: this.state.url + this.state.gray })\n  }\n  URL_blur () {\n    this.setState({ URL: this.state.url + this.state.blur })\n  }\n  URL_grayscaleblur () {\n    this.setState({ URL: this.state.url + this.state.grayscaleblur })\n  }\n\n  render () {\n    return (\n      <div className='App'>\n        <div class='title'>\n          <h1>Beautiful Photograph</h1>\n        </div>\n        <div class='Button'>\n          {/* <Button onClick={() => window.location.reload()} variant=\"contained\" color=\"primary\"> */}\n          {/* Click me */}\n          {/* </Button> */}\n          <Button\n            onClick={() => this.URL_normal()}\n            variant='contained'\n            color='primary'\n          >\n            normal\n          </Button>\n          <Button\n            onClick={() => this.URL_gray()}\n            variant='contained'\n            color='primary'\n          >\n            gray\n          </Button>\n          <Button\n            onClick={() => this.URL_blur()}\n            variant='contained'\n            color='primary'\n          >\n            blur\n          </Button>\n          <Button\n            onClick={() => this.URL_grayscaleblur()}\n            variant='contained'\n            color='primary'\n          >\n            grayblur\n          </Button>\n          <Button\n            onClick={() => window.location.reload()}\n            variant='contained'\n            color='primary'\n          >\n            reload\n          </Button>\n        </div>\n        <div>\n          <img src={this.state.URL}></img>\n        </div>\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}